// vim: set expandtab tabstop=3

// to check syntax quickly
// idlpp  -I${OSPL_HOME}/etc/idl -l c  tsn.idl





/*
 *      OpenSplice DDS IDL definition for TSN
 */

module TSN 
{
    typedef unsigned long serial_number;
    
    // Personal information of the user. Published on startup.
    struct user_information 
    {
        char uuid[17];                  // 16 characters + C style NULL
        string<70> first_name;
        string<70> last_name;
        long date_of_birth;             // Date of birth of user, seconds elapsed
                                        // since time began (jan 1,1970 origin)

        sequence<string> interests;     
        unsigned long long number_of_highest_post;
    };
    #pragma keylist user_information uuid
    #pragma cats user_information uuid


    // A request for posts, to be fulfilled by a single node.
    // This struct cannot be published over the network as-is, only as part of the
    // user_requests member of the Request struct.
    struct node_request 
    {
        char fulfiller_uuid[17];  // the owner of the posts
        sequence<serial_number> requested_posts;
    };

    // A request for posts. When this is recieved, each node must iterate through the 
    // user_requests to see if they must fulfill a request.
    // These are sent at most once per minute, for a node to collect new content.
    // Before sending a request, a node must check all AvailableContent 
    // and Response structs it has recieved,
    // to verify that there is new content to collect.
    struct request 
    {
        char uuid[17];  //  the uuid of the node making the request
        sequence<node_request> user_requests;
    };
    #pragma keylist request uuid
    #pragma cats request uuid


    // A response to a Request, containing data for a single post. These are sent out at most
    // once per second.
    // Nodes shall not attempt to create Responses for data they do not own.
    struct response 
    {
        char uuid[17];                       // uuid owner
        serial_number post_id;
        string post_body;
        long date_of_creation;              // When post was made in seconds since 1/1/1970
    };
    #pragma keylist response uuid
    #pragma cats response uuid

    /* The participant is "" */
    /* Topic requirements:
        1> the name of each topic will be the name of each structure.  
        2> the QOS settings will be :
                    reliability.kind = DDS_RELIABLE_RELIABILITY_QOS;
                    durability.kind = DDS_TRANSIENT_DURABILITY_QOS;

                    history.kind = KEEP_LAST_HISTORY_QOS;
                    history.depth = 2;
        This is identical to the HelloWorld Example, it may change as we learn more
    */
};


