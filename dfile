diff --git a/cpp/src/User.cpp b/cpp/src/User.cpp
index 8d84158..2cd7c07 100644
--- a/cpp/src/User.cpp
+++ b/cpp/src/User.cpp
@@ -67,11 +67,14 @@ void User::set_user_uuid(std::string uuid_string)
 {
     for(int i = 0; i <=37;i++)
     {
-        this->uuidCharArray[i] = uuid_string[i];
+        
         if(i == 37)
         {
             this->uuidCharArray[i] = '\0';
         }
+        else {
+            this->uuidCharArray[i] = uuid_string[i];
+        }
     }
 }
 
@@ -125,4 +128,4 @@ void User::write_to_file()
     {
         throw std::runtime_error("Could not open file");
     } 
-}
\ No newline at end of file
+}
diff --git a/cpp/src/main.cpp b/cpp/src/main.cpp
index 49d8a36..95f488b 100644
--- a/cpp/src/main.cpp
+++ b/cpp/src/main.cpp
@@ -8,7 +8,6 @@
 #include <fstream>
 #include "DDSEntityManager.h"
 #include "ccpp_tsn.h"
-#include "os.h"
 #include "User.h"
 #include "example_main.h"
 #include <boost/lexical_cast.hpp>
@@ -138,11 +137,14 @@ int user_informationPublisher(int argc, char *argv[]) {
         boost::uuids::uuid uuid = boost::uuids::random_generator()();
         std::string uuid_string = to_string(uuid);
 
-        for (int i = 0; i <= 37; i++) {
-            uuidCharArray[i] = uuid_string[i];
+        std::cout << sizeof(uuidCharArray) << "  " << uuid_string.size() << std::endl;
+        for (long unsigned int i = 0; i <= sizeof(uuidCharArray);i++) {
             if (i == 37) {                                       //COPY GENERATED UUID TO uuidCharArray
                 uuidCharArray[i] = '\0';
             }
+            else {
+                uuidCharArray[i] = uuid_string[i];
+            }
         }
 
         my_user.set_user_uuid(uuid_string);
@@ -208,6 +210,11 @@ int user_informationPublisher(int argc, char *argv[]) {
 /
 ////////////////////////////////////*/
 int user_informationSubscriber(int argc, char *argv[]) {
+
+//  this thread needs to run continuously, as it will not work to continously
+//  create and delete these objects.  
+//
+//
     os_time delay_2ms = {0, 2000000};
     os_time delay_200ms = {0, 200000000};
     user_informationSeq msgList;    //DATA STRUCTURE THAT RECEIVES MSGS.
@@ -216,13 +223,17 @@ int user_informationSubscriber(int argc, char *argv[]) {
     DDSEntityManager mgr;
 
     // create domain participant
-    mgr.createParticipant("TSN example");
+    //
+
+// Please look in the tsn.idl file, this name is not correct
+    mgr.createParticipant("TSN example"); 
 
     //create type
     user_informationTypeSupport_var mt = new user_informationTypeSupport();
     mgr.registerType(mt.in());
 
     //create Topic
+// Please look in the tsn.idl file, this name is not correct
     char topic_name[] = "tsn_Msg";
     mgr.createTopic(topic_name);
 
@@ -244,7 +255,11 @@ int user_informationSubscriber(int argc, char *argv[]) {
     int count = 0;
     User static_user; //USER OBJECT TO WRITE PARAMETERS TO USERS.TSN
     std::vector<std::string> user_interests;
-    while (!closed && count < 1500) // We dont want the example to run indefinitely
+    //while (!closed && count < 1500) // We dont want the example to run indefinitely
+
+// need to have some communications path (global variable) that will cleanly exit this
+// while loop when the program exits.  for now, let it run.
+    while(1)
     {
         status = HelloWorldReader->take(msgList, infoSeq, LENGTH_UNLIMITED,
                                         ANY_SAMPLE_STATE, ANY_VIEW_STATE, ANY_INSTANCE_STATE);
@@ -278,8 +293,11 @@ int user_informationSubscriber(int argc, char *argv[]) {
         ++count;
     }
 
+
+    
     os_nanoSleep(delay_2ms);
 
+// you only want to cleanup when the program / thread exits
     //cleanup
     mgr.deleteReader();
     mgr.deleteSubscriber();
@@ -462,10 +480,7 @@ void edit_user_data() {
 /
 ////////////////////////////////////*/
 void run_subscriber(int argc, char *argv[]) {
-    while (1) {
-        user_informationSubscriber(argc, argv);
-        sleep(10);
-    }
+   user_informationSubscriber(argc, argv);
 }
 
 
@@ -737,7 +752,7 @@ int OSPL_MAIN(int argc, char *argv[]) {
     std::cout << "Lets setup your profile! " << std::endl;
     int is_user_found = user_informationPublisher(argc, argv);
     //std::thread second(run_subscriber,argc,argv);
-    char uuidCharArray[17];
+    char uuidCharArray[TSN::UUID_SIZE];
     if (is_user_found) {
         std::cout << "UUID FOUND. Loading from file" << std::endl;
         std::ifstream input;
@@ -757,7 +772,7 @@ int OSPL_MAIN(int argc, char *argv[]) {
     std::cout<<"[UserInformation Subscriber Launched....]"<<std::endl; 
     //PROGRAM SEG FAULTS UPON LAUNCHING THREAD. RUN SUBSCRIBER SHOULD USE THREAD TO CHECK CONTINUOSLY BUT DISABLED FOR NOW.
     std::thread requestsub(start_request_subscriber);
-     second.join(); 
+    // you should only join at the end      second.join(); 
    // std::thread responsesub(start_response_subscriber);
     while (1) {
         int user_action_num;
@@ -823,4 +838,4 @@ int OSPL_MAIN(int argc, char *argv[]) {
     //requestsub.join();
     return 0;
 
-}
\ No newline at end of file
+}
