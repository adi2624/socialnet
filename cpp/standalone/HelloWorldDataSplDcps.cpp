#include "HelloWorldDataSplDcps.h"
#include "ccpp_HelloWorldData.h"
#include "dds_type_aliases.h"

const char *
__TSN_UserInformation__name(void)
{
    return (const char*)"TSN::UserInformation";
}

const char *
__TSN_UserInformation__keys(void)
{
    return (const char*)"uuid";
}

const char *
__TSN_NodeRequest__name(void)
{
    return (const char*)"TSN::NodeRequest";
}

const char *
__TSN_NodeRequest__keys(void)
{
    return (const char*)"";
}

const char *
__TSN_Request__name(void)
{
    return (const char*)"TSN::Request";
}

const char *
__TSN_Request__keys(void)
{
    return (const char*)"uuid";
}

const char *
__TSN_Response__name(void)
{
    return (const char*)"TSN::Response";
}

const char *
__TSN_Response__keys(void)
{
    return (const char*)"uuid";
}

#include <v_kernel.h>
#include <v_topic.h>
#include <os_stdlib.h>
#include <string.h>
#include <os_report.h>

c_bool
__TSN_UserInformation__copyIn(
    c_base base,
    struct ::TSN::UserInformation *from,
    struct _TSN_UserInformation *to)
{
    c_bool result = OS_C_TRUE;
    (void) base;

    {
        /* Allocate the length of the array (and null terminator) as a database
        * string
        */
        to->uuid = c_stringMalloc(base, (17 + 1));
        if(to->uuid)
        {
            /* Copy the value of the array into the database string */
           strncpy(to->uuid, from->uuid, 17);
            to->uuid[17] = '\0';
        }
    }
#ifdef OSPL_BOUNDS_CHECK
    if(from->first_name){
        if(((unsigned int)strlen(from->first_name)) <= 70){
            to->first_name = c_stringNew(base, from->first_name);
        } else {
            OS_REPORT (OS_ERROR, "copyIn", 0,"Member 'TSN::UserInformation.first_name' of type 'C_STRING<70>' is out of range.");
            result = OS_C_FALSE;
        }
    } else {
        OS_REPORT (OS_ERROR, "copyIn", 0,"Member 'TSN::UserInformation.first_name' of type 'C_STRING<70>' is NULL.");
        result = OS_C_FALSE;
    }
#else
    to->first_name = c_stringNew(base, from->first_name);
#endif
#ifdef OSPL_BOUNDS_CHECK
    if(from->last_name){
        if(((unsigned int)strlen(from->last_name)) <= 70){
            to->last_name = c_stringNew(base, from->last_name);
        } else {
            OS_REPORT (OS_ERROR, "copyIn", 0,"Member 'TSN::UserInformation.last_name' of type 'C_STRING<70>' is out of range.");
            result = OS_C_FALSE;
        }
    } else {
        OS_REPORT (OS_ERROR, "copyIn", 0,"Member 'TSN::UserInformation.last_name' of type 'C_STRING<70>' is NULL.");
        result = OS_C_FALSE;
    }
#else
    to->last_name = c_stringNew(base, from->last_name);
#endif
    to->dateOfBirth = (c_long)from->dateOfBirth;
    {
/* Code generated by /home/dds/OvernightTests/tmp.EvVa0SFLQ3/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 774 */

        static c_type type0 = NULL;
        c_type subtype0;
        c_long length0;
        c_string *dest0;
        ::TSN::UserInformation::_interests_seq *src = &from->interests;

        if (type0 == NULL) {
            subtype0 = c_type(c_metaResolve (c_metaObject(base), "c_string"));
            type0 = c_metaSequenceTypeNew(c_metaObject(base),"C_SEQUENCE<c_string>",subtype0,0);
            c_free(subtype0);
        }
        length0 = (c_long)(*src).length();
#ifdef OSPL_BOUNDS_CHECK
         dest0 = (c_string *)c_newSequence(c_collectionType(type0),length0);
        {
        /* Code generated by /home/dds/OvernightTests/tmp.EvVa0SFLQ3/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 1928 */
            unsigned int i0;
            for (i0 = 0; (i0 < (unsigned int)length0) && result; i0++) {
#ifdef OSPL_BOUNDS_CHECK
                if((*src)[i0]){
                    dest0[i0] = c_stringNew(base, (*src)[i0]);
                } else {
                    OS_REPORT (OS_ERROR, "copyIn", 0,"Element of 'TSN::UserInformation.*src' of type 'c_string' is NULL.");
                    result = OS_C_FALSE;
                }
#else
                dest0[i0] = c_stringNew(base, (*src)[i0]);
#endif
            }
        }
        to->interests = (c_sequence)dest0;
#else
        dest0 = (c_string *)c_newSequence(c_collectionType(type0),length0);
        {
        /* Code generated by /home/dds/OvernightTests/tmp.EvVa0SFLQ3/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 1928 */
            unsigned int i0;
            for (i0 = 0; (i0 < (unsigned int)length0) && result; i0++) {
#ifdef OSPL_BOUNDS_CHECK
                if((*src)[i0]){
                    dest0[i0] = c_stringNew(base, (*src)[i0]);
                } else {
                    OS_REPORT (OS_ERROR, "copyIn", 0,"Element of 'TSN::UserInformation.*src' of type 'c_string' is NULL.");
                    result = OS_C_FALSE;
                }
#else
                dest0[i0] = c_stringNew(base, (*src)[i0]);
#endif
            }
        }
        to->interests = (c_sequence)dest0;
#endif
    }
    return result;
}

c_bool
__TSN_NodeRequest__copyIn(
    c_base base,
    struct ::TSN::NodeRequest *from,
    struct _TSN_NodeRequest *to)
{
    c_bool result = OS_C_TRUE;
    (void) base;

    {
        typedef c_char _DestType[17];
        _DestType *dest = &to->fulfiller_uuid;
        memcpy (dest, from->fulfiller_uuid, sizeof (*dest));
    }
    {
/* Code generated by /home/dds/OvernightTests/tmp.EvVa0SFLQ3/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 774 */

        static c_type type0 = NULL;
        c_type subtype0;
        c_long length0;
        _TSN_serial_number *dest0;
        ::TSN::NodeRequest::_requested_posts_seq *src = &from->requested_posts;

        if (type0 == NULL) {
            subtype0 = c_type(c_metaResolve (c_metaObject(base), "TSN::serial_number"));
            type0 = c_metaSequenceTypeNew(c_metaObject(base),"C_SEQUENCE<TSN::serial_number>",subtype0,0);
            c_free(subtype0);
        }
        length0 = (c_long)(*src).length();
#ifdef OSPL_BOUNDS_CHECK
         dest0 = (_TSN_serial_number *)c_newSequence(c_collectionType(type0),length0);
        {
        /* Code generated by /home/dds/OvernightTests/tmp.EvVa0SFLQ3/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 1873 */
                    _TSN_serial_number *buf0;
            buf0 = (_TSN_serial_number *)(*src).get_buffer();
            memcpy (dest0,buf0,length0* sizeof(*dest0));
        }
        to->requested_posts = (c_sequence)dest0;
#else
        dest0 = (_TSN_serial_number *)c_newSequence(c_collectionType(type0),length0);
        {
        /* Code generated by /home/dds/OvernightTests/tmp.EvVa0SFLQ3/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 1873 */
                    _TSN_serial_number *buf0;
            buf0 = (_TSN_serial_number *)(*src).get_buffer();
            memcpy (dest0,buf0,length0* sizeof(*dest0));
        }
        to->requested_posts = (c_sequence)dest0;
#endif
    }
    return result;
}

c_bool
__TSN_Request__copyIn(
    c_base base,
    struct ::TSN::Request *from,
    struct _TSN_Request *to)
{
    c_bool result = OS_C_TRUE;
    (void) base;

    {
        /* Allocate the length of the array (and null terminator) as a database
        * string
        */
        to->uuid = c_stringMalloc(base, (17 + 1));
        if(to->uuid)
        {
            /* Copy the value of the array into the database string */
           strncpy(to->uuid, from->uuid, 17);
            to->uuid[17] = '\0';
        }
    }
    {
/* Code generated by /home/dds/OvernightTests/tmp.EvVa0SFLQ3/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 774 */

        static c_type type0 = NULL;
        c_type subtype0;
        c_long length0;
        struct _TSN_NodeRequest *dest0;
        ::TSN::Request::_user_requests_seq *src = &from->user_requests;

        if (type0 == NULL) {
            subtype0 = c_type(c_metaResolve (c_metaObject(base), "TSN::NodeRequest"));
            type0 = c_metaSequenceTypeNew(c_metaObject(base),"C_SEQUENCE<TSN::NodeRequest>",subtype0,0);
            c_free(subtype0);
        }
        length0 = (c_long)(*src).length();
#ifdef OSPL_BOUNDS_CHECK
         dest0 = (struct _TSN_NodeRequest *)c_newSequence(c_collectionType(type0),length0);
        {
        /* Code generated by /home/dds/OvernightTests/tmp.EvVa0SFLQ3/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 1928 */
            unsigned int i0;
            for (i0 = 0; (i0 < (unsigned int)length0) && result; i0++) {
                extern c_bool __TSN_NodeRequest__copyIn(c_base base,
                    TSN::NodeRequest *From,
                    struct _TSN_NodeRequest *To);

                result = __TSN_NodeRequest__copyIn(base, &(*src)[i0], (struct _TSN_NodeRequest *)&dest0[i0]);
            }
        }
        to->user_requests = (c_sequence)dest0;
#else
        dest0 = (struct _TSN_NodeRequest *)c_newSequence(c_collectionType(type0),length0);
        {
        /* Code generated by /home/dds/OvernightTests/tmp.EvVa0SFLQ3/build/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 1928 */
            unsigned int i0;
            for (i0 = 0; (i0 < (unsigned int)length0) && result; i0++) {
                extern c_bool __TSN_NodeRequest__copyIn(c_base base,
                    TSN::NodeRequest *From,
                    struct _TSN_NodeRequest *To);

                result = __TSN_NodeRequest__copyIn(base, &(*src)[i0], (struct _TSN_NodeRequest *)&dest0[i0]);
            }
        }
        to->user_requests = (c_sequence)dest0;
#endif
    }
    return result;
}

c_bool
__TSN_Response__copyIn(
    c_base base,
    struct ::TSN::Response *from,
    struct _TSN_Response *to)
{
    c_bool result = OS_C_TRUE;
    (void) base;

    {
        /* Allocate the length of the array (and null terminator) as a database
        * string
        */
        to->uuid = c_stringMalloc(base, (17 + 1));
        if(to->uuid)
        {
            /* Copy the value of the array into the database string */
           strncpy(to->uuid, from->uuid, 17);
            to->uuid[17] = '\0';
        }
    }
    to->post_id = (c_ulong)from->post_id;
#ifdef OSPL_BOUNDS_CHECK
    if(from->post_body){
        to->post_body = c_stringNew(base, from->post_body);
    } else {
        OS_REPORT (OS_ERROR, "copyIn", 0,"Member 'TSN::Response.post_body' of type 'c_string' is NULL.");
        result = OS_C_FALSE;
    }
#else
    to->post_body = c_stringNew(base, from->post_body);
#endif
    to->dateOfCreation = (c_long)from->dateOfCreation;
    return result;
}

void
__TSN_UserInformation__copyOut(
    void *_from,
    void *_to)
{
    struct _TSN_UserInformation *from = (struct _TSN_UserInformation *)_from;
    struct ::TSN::UserInformation *to = (struct ::TSN::UserInformation *)_to;
    {
       strncpy(to->uuid, from->uuid, 17);
    }
    to->first_name = DDS::string_dup(from->first_name ? from->first_name : "");
    to->last_name = DDS::string_dup(from->last_name ? from->last_name : "");
    to->dateOfBirth = (::DDS::Long)from->dateOfBirth;
    {
        long size0;
        c_string *src0 = (c_string *)from->interests;
        ::TSN::UserInformation::_interests_seq *dst = &to->interests;

        size0 = c_arraySize(c_sequence(from->interests));
        to->interests.length(size0);
        {
            long i0;
            for (i0 = 0; i0 < size0; i0++) {
                (*dst)[i0] = DDS::string_dup(src0[i0]);
            }
        }
    }
}

void
__TSN_NodeRequest__copyOut(
    void *_from,
    void *_to)
{
    struct _TSN_NodeRequest *from = (struct _TSN_NodeRequest *)_from;
    struct ::TSN::NodeRequest *to = (struct ::TSN::NodeRequest *)_to;
    {
        typedef c_char _DestType[17];
        _DestType *src = &from->fulfiller_uuid;

        memcpy (to->fulfiller_uuid, src, sizeof (*src));
    }
    {
        long size0;
        _TSN_serial_number *src0 = (_TSN_serial_number *)from->requested_posts;
        ::TSN::NodeRequest::_requested_posts_seq *dst = &to->requested_posts;

        size0 = c_arraySize(c_sequence(from->requested_posts));
        to->requested_posts.length(size0);
        {
            _TSN_serial_number *buf0;
            buf0 = (_TSN_serial_number *)(*dst).get_buffer();
            memcpy (buf0,src0,size0* sizeof(*buf0));
        }
    }
}

void
__TSN_Request__copyOut(
    void *_from,
    void *_to)
{
    struct _TSN_Request *from = (struct _TSN_Request *)_from;
    struct ::TSN::Request *to = (struct ::TSN::Request *)_to;
    {
       strncpy(to->uuid, from->uuid, 17);
    }
    {
        long size0;
        struct _TSN_NodeRequest *src0 = (struct _TSN_NodeRequest *)from->user_requests;
        ::TSN::Request::_user_requests_seq *dst = &to->user_requests;

        size0 = c_arraySize(c_sequence(from->user_requests));
        to->user_requests.length(size0);
        {
            long i0;
            for (i0 = 0; i0 < size0; i0++) {
                extern void __TSN_NodeRequest__copyOut(void *from, void *to);
                __TSN_NodeRequest__copyOut((void *)&src0[i0], (void *)&(*dst)[i0]);
            }
        }
    }
}

void
__TSN_Response__copyOut(
    void *_from,
    void *_to)
{
    struct _TSN_Response *from = (struct _TSN_Response *)_from;
    struct ::TSN::Response *to = (struct ::TSN::Response *)_to;
    {
       strncpy(to->uuid, from->uuid, 17);
    }
    to->post_id = (::DDS::ULong)from->post_id;
    to->post_body = DDS::string_dup(from->post_body ? from->post_body : "");
    to->dateOfCreation = (::DDS::Long)from->dateOfCreation;
}

