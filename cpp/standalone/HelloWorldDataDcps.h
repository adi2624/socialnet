//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: HelloWorldDataDcps.h
//  Source: HelloWorldDataDcps.idl
//  Generated: Fri Sep 14 16:37:02 2018
//  OpenSplice V6.4.140320OSS
//  
//******************************************************************
#ifndef _HELLOWORLDDATADCPS_H_
#define _HELLOWORLDDATADCPS_H_

#include "sacpp_mapping.h"
#include "sacpp_DDS_DCPS.h"
#include "dds_dcps.h"
#include "HelloWorldData.h"


namespace TSN
{

   class UserInformationTypeSupportInterface;

   typedef UserInformationTypeSupportInterface * UserInformationTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < UserInformationTypeSupportInterface> UserInformationTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < UserInformationTypeSupportInterface> UserInformationTypeSupportInterface_out;


   class UserInformationDataWriter;

   typedef UserInformationDataWriter * UserInformationDataWriter_ptr;
   typedef DDS_DCPSInterface_var < UserInformationDataWriter> UserInformationDataWriter_var;
   typedef DDS_DCPSInterface_out < UserInformationDataWriter> UserInformationDataWriter_out;


   class UserInformationDataReader;

   typedef UserInformationDataReader * UserInformationDataReader_ptr;
   typedef DDS_DCPSInterface_var < UserInformationDataReader> UserInformationDataReader_var;
   typedef DDS_DCPSInterface_out < UserInformationDataReader> UserInformationDataReader_out;


   class UserInformationDataReaderView;

   typedef UserInformationDataReaderView * UserInformationDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < UserInformationDataReaderView> UserInformationDataReaderView_var;
   typedef DDS_DCPSInterface_out < UserInformationDataReaderView> UserInformationDataReaderView_out;


   class RequestTypeSupportInterface;

   typedef RequestTypeSupportInterface * RequestTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < RequestTypeSupportInterface> RequestTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < RequestTypeSupportInterface> RequestTypeSupportInterface_out;


   class RequestDataWriter;

   typedef RequestDataWriter * RequestDataWriter_ptr;
   typedef DDS_DCPSInterface_var < RequestDataWriter> RequestDataWriter_var;
   typedef DDS_DCPSInterface_out < RequestDataWriter> RequestDataWriter_out;


   class RequestDataReader;

   typedef RequestDataReader * RequestDataReader_ptr;
   typedef DDS_DCPSInterface_var < RequestDataReader> RequestDataReader_var;
   typedef DDS_DCPSInterface_out < RequestDataReader> RequestDataReader_out;


   class RequestDataReaderView;

   typedef RequestDataReaderView * RequestDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < RequestDataReaderView> RequestDataReaderView_var;
   typedef DDS_DCPSInterface_out < RequestDataReaderView> RequestDataReaderView_out;


   class ResponseTypeSupportInterface;

   typedef ResponseTypeSupportInterface * ResponseTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < ResponseTypeSupportInterface> ResponseTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < ResponseTypeSupportInterface> ResponseTypeSupportInterface_out;


   class ResponseDataWriter;

   typedef ResponseDataWriter * ResponseDataWriter_ptr;
   typedef DDS_DCPSInterface_var < ResponseDataWriter> ResponseDataWriter_var;
   typedef DDS_DCPSInterface_out < ResponseDataWriter> ResponseDataWriter_out;


   class ResponseDataReader;

   typedef ResponseDataReader * ResponseDataReader_ptr;
   typedef DDS_DCPSInterface_var < ResponseDataReader> ResponseDataReader_var;
   typedef DDS_DCPSInterface_out < ResponseDataReader> ResponseDataReader_out;


   class ResponseDataReaderView;

   typedef ResponseDataReaderView * ResponseDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < ResponseDataReaderView> ResponseDataReaderView_var;
   typedef DDS_DCPSInterface_out < ResponseDataReaderView> ResponseDataReaderView_out;

   struct UserInformationSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < UserInformation, struct UserInformationSeq_uniq_> UserInformationSeq;
   typedef DDS_DCPSSequence_var < UserInformationSeq> UserInformationSeq_var;
   typedef DDS_DCPSSequence_out < UserInformationSeq> UserInformationSeq_out;
   class UserInformationTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef UserInformationTypeSupportInterface_ptr _ptr_type;
      typedef UserInformationTypeSupportInterface_var _var_type;

      static UserInformationTypeSupportInterface_ptr _duplicate (UserInformationTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static UserInformationTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static UserInformationTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static UserInformationTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      UserInformationTypeSupportInterface_ptr _this () { return this; }


   protected:
      UserInformationTypeSupportInterface () {};
      ~UserInformationTypeSupportInterface () {};
   private:
      UserInformationTypeSupportInterface (const UserInformationTypeSupportInterface &);
      UserInformationTypeSupportInterface & operator = (const UserInformationTypeSupportInterface &);
   };

   class UserInformationDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef UserInformationDataWriter_ptr _ptr_type;
      typedef UserInformationDataWriter_var _var_type;

      static UserInformationDataWriter_ptr _duplicate (UserInformationDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static UserInformationDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static UserInformationDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static UserInformationDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      UserInformationDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const UserInformation& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const UserInformation& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const UserInformation& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const UserInformation& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const UserInformation& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const UserInformation& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const UserInformation& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const UserInformation& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const UserInformation& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const UserInformation& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (UserInformation& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const UserInformation& instance_data) = 0;

   protected:
      UserInformationDataWriter () {};
      ~UserInformationDataWriter () {};
   private:
      UserInformationDataWriter (const UserInformationDataWriter &);
      UserInformationDataWriter & operator = (const UserInformationDataWriter &);
   };

   class UserInformationDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef UserInformationDataReader_ptr _ptr_type;
      typedef UserInformationDataReader_var _var_type;

      static UserInformationDataReader_ptr _duplicate (UserInformationDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static UserInformationDataReader_ptr _narrow (DDS::Object_ptr obj);
      static UserInformationDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static UserInformationDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      UserInformationDataReader_ptr _this () { return this; }

      virtual DDS::Long read (UserInformationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (UserInformationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (UserInformationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (UserInformationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (UserInformation& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (UserInformation& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (UserInformationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (UserInformationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (UserInformationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (UserInformationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (UserInformationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (UserInformationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (UserInformationSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (UserInformation& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const UserInformation& instance) = 0;

   protected:
      UserInformationDataReader () {};
      ~UserInformationDataReader () {};
   private:
      UserInformationDataReader (const UserInformationDataReader &);
      UserInformationDataReader & operator = (const UserInformationDataReader &);
   };

   class UserInformationDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef UserInformationDataReaderView_ptr _ptr_type;
      typedef UserInformationDataReaderView_var _var_type;

      static UserInformationDataReaderView_ptr _duplicate (UserInformationDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static UserInformationDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static UserInformationDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static UserInformationDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      UserInformationDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (UserInformationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (UserInformationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (UserInformationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (UserInformationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (UserInformation& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (UserInformation& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (UserInformationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (UserInformationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (UserInformationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (UserInformationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (UserInformationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (UserInformationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (UserInformationSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (UserInformation& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const UserInformation& instance) = 0;

   protected:
      UserInformationDataReaderView () {};
      ~UserInformationDataReaderView () {};
   private:
      UserInformationDataReaderView (const UserInformationDataReaderView &);
      UserInformationDataReaderView & operator = (const UserInformationDataReaderView &);
   };

   struct RequestSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < Request, struct RequestSeq_uniq_> RequestSeq;
   typedef DDS_DCPSSequence_var < RequestSeq> RequestSeq_var;
   typedef DDS_DCPSSequence_out < RequestSeq> RequestSeq_out;
   class RequestTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef RequestTypeSupportInterface_ptr _ptr_type;
      typedef RequestTypeSupportInterface_var _var_type;

      static RequestTypeSupportInterface_ptr _duplicate (RequestTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static RequestTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static RequestTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static RequestTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      RequestTypeSupportInterface_ptr _this () { return this; }


   protected:
      RequestTypeSupportInterface () {};
      ~RequestTypeSupportInterface () {};
   private:
      RequestTypeSupportInterface (const RequestTypeSupportInterface &);
      RequestTypeSupportInterface & operator = (const RequestTypeSupportInterface &);
   };

   class RequestDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef RequestDataWriter_ptr _ptr_type;
      typedef RequestDataWriter_var _var_type;

      static RequestDataWriter_ptr _duplicate (RequestDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static RequestDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static RequestDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static RequestDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      RequestDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const Request& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const Request& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const Request& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const Request& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const Request& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const Request& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const Request& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const Request& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const Request& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const Request& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (Request& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Request& instance_data) = 0;

   protected:
      RequestDataWriter () {};
      ~RequestDataWriter () {};
   private:
      RequestDataWriter (const RequestDataWriter &);
      RequestDataWriter & operator = (const RequestDataWriter &);
   };

   class RequestDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef RequestDataReader_ptr _ptr_type;
      typedef RequestDataReader_var _var_type;

      static RequestDataReader_ptr _duplicate (RequestDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static RequestDataReader_ptr _narrow (DDS::Object_ptr obj);
      static RequestDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static RequestDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      RequestDataReader_ptr _this () { return this; }

      virtual DDS::Long read (RequestSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (RequestSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (RequestSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (RequestSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Request& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Request& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (RequestSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (RequestSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (RequestSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (RequestSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (RequestSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (RequestSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (RequestSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Request& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Request& instance) = 0;

   protected:
      RequestDataReader () {};
      ~RequestDataReader () {};
   private:
      RequestDataReader (const RequestDataReader &);
      RequestDataReader & operator = (const RequestDataReader &);
   };

   class RequestDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef RequestDataReaderView_ptr _ptr_type;
      typedef RequestDataReaderView_var _var_type;

      static RequestDataReaderView_ptr _duplicate (RequestDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static RequestDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static RequestDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static RequestDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      RequestDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (RequestSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (RequestSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (RequestSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (RequestSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Request& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Request& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (RequestSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (RequestSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (RequestSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (RequestSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (RequestSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (RequestSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (RequestSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Request& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Request& instance) = 0;

   protected:
      RequestDataReaderView () {};
      ~RequestDataReaderView () {};
   private:
      RequestDataReaderView (const RequestDataReaderView &);
      RequestDataReaderView & operator = (const RequestDataReaderView &);
   };

   struct ResponseSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < Response, struct ResponseSeq_uniq_> ResponseSeq;
   typedef DDS_DCPSSequence_var < ResponseSeq> ResponseSeq_var;
   typedef DDS_DCPSSequence_out < ResponseSeq> ResponseSeq_out;
   class ResponseTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef ResponseTypeSupportInterface_ptr _ptr_type;
      typedef ResponseTypeSupportInterface_var _var_type;

      static ResponseTypeSupportInterface_ptr _duplicate (ResponseTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ResponseTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static ResponseTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ResponseTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      ResponseTypeSupportInterface_ptr _this () { return this; }


   protected:
      ResponseTypeSupportInterface () {};
      ~ResponseTypeSupportInterface () {};
   private:
      ResponseTypeSupportInterface (const ResponseTypeSupportInterface &);
      ResponseTypeSupportInterface & operator = (const ResponseTypeSupportInterface &);
   };

   class ResponseDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef ResponseDataWriter_ptr _ptr_type;
      typedef ResponseDataWriter_var _var_type;

      static ResponseDataWriter_ptr _duplicate (ResponseDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ResponseDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static ResponseDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ResponseDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      ResponseDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const Response& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const Response& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const Response& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const Response& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const Response& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const Response& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const Response& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const Response& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const Response& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const Response& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (Response& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Response& instance_data) = 0;

   protected:
      ResponseDataWriter () {};
      ~ResponseDataWriter () {};
   private:
      ResponseDataWriter (const ResponseDataWriter &);
      ResponseDataWriter & operator = (const ResponseDataWriter &);
   };

   class ResponseDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef ResponseDataReader_ptr _ptr_type;
      typedef ResponseDataReader_var _var_type;

      static ResponseDataReader_ptr _duplicate (ResponseDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ResponseDataReader_ptr _narrow (DDS::Object_ptr obj);
      static ResponseDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ResponseDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      ResponseDataReader_ptr _this () { return this; }

      virtual DDS::Long read (ResponseSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (ResponseSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (ResponseSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (ResponseSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Response& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Response& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (ResponseSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (ResponseSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (ResponseSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (ResponseSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (ResponseSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (ResponseSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (ResponseSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Response& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Response& instance) = 0;

   protected:
      ResponseDataReader () {};
      ~ResponseDataReader () {};
   private:
      ResponseDataReader (const ResponseDataReader &);
      ResponseDataReader & operator = (const ResponseDataReader &);
   };

   class ResponseDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef ResponseDataReaderView_ptr _ptr_type;
      typedef ResponseDataReaderView_var _var_type;

      static ResponseDataReaderView_ptr _duplicate (ResponseDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ResponseDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static ResponseDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ResponseDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      ResponseDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (ResponseSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (ResponseSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (ResponseSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (ResponseSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Response& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Response& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (ResponseSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (ResponseSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (ResponseSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (ResponseSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (ResponseSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (ResponseSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (ResponseSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Response& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Response& instance) = 0;

   protected:
      ResponseDataReaderView () {};
      ~ResponseDataReaderView () {};
   private:
      ResponseDataReaderView (const ResponseDataReaderView &);
      ResponseDataReaderView & operator = (const ResponseDataReaderView &);
   };

}




#endif 
