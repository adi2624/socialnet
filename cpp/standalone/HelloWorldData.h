//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: HelloWorldData.h
//  Source: ../../idl/HelloWorldData.idl
//  Generated: Fri Sep 14 16:37:02 2018
//  OpenSplice V6.4.140320OSS
//  
//******************************************************************
#ifndef _HELLOWORLDDATA_H_
#define _HELLOWORLDDATA_H_

#include "sacpp_mapping.h"
#include "sacpp_DDS_DCPS.h"


namespace TSN
{
   struct UserInformation;
   struct NodeRequest;
   struct Request;
   struct Response;
   typedef DDS::ULong serial_number;

   struct UserInformation
   {
         typedef DDS::Char _uuid_slice;
         typedef DDS::Char _uuid[17];
         typedef _uuid _uuid_out;
         static _uuid_slice * _uuid_alloc ();
         static void _uuid_free (_uuid_slice *);
         static void _uuid_copy (_uuid_slice* to, const _uuid_slice* from);
         static _uuid_slice *_uuid_dup (const _uuid_slice* from);

         struct _uuid_uniq_ {};
         typedef DDS_DCPS_FArray_var< _uuid, _uuid_slice, struct _uuid_uniq_> _uuid_var;
         typedef DDS_DCPS_Array_forany< _uuid, _uuid_slice, struct _uuid_uniq_> _uuid_forany;
         struct _interests_seq_uniq_ {};
         typedef DDS_DCPSUStrSeqT <struct _interests_seq_uniq_> _interests_seq;
         typedef DDS_DCPSUStrSeq_var < _interests_seq> _interests_seq_var;
         typedef DDS_DCPSUStrSeq_out < _interests_seq> _interests_seq_out;
         _uuid uuid;
         DDS::String_mgr first_name;
         DDS::String_mgr last_name;
         DDS::Long dateOfBirth;
         _interests_seq interests;
   };

   typedef DDS_DCPSStruct_var < UserInformation> UserInformation_var;
   typedef DDS_DCPSStruct_out < UserInformation> UserInformation_out;

   struct NodeRequest
   {
         typedef DDS::Char _fulfiller_uuid_slice;
         typedef DDS::Char _fulfiller_uuid[17];
         typedef _fulfiller_uuid _fulfiller_uuid_out;
         static _fulfiller_uuid_slice * _fulfiller_uuid_alloc ();
         static void _fulfiller_uuid_free (_fulfiller_uuid_slice *);
         static void _fulfiller_uuid_copy (_fulfiller_uuid_slice* to, const _fulfiller_uuid_slice* from);
         static _fulfiller_uuid_slice *_fulfiller_uuid_dup (const _fulfiller_uuid_slice* from);

         struct _fulfiller_uuid_uniq_ {};
         typedef DDS_DCPS_FArray_var< _fulfiller_uuid, _fulfiller_uuid_slice, struct _fulfiller_uuid_uniq_> _fulfiller_uuid_var;
         typedef DDS_DCPS_Array_forany< _fulfiller_uuid, _fulfiller_uuid_slice, struct _fulfiller_uuid_uniq_> _fulfiller_uuid_forany;
         struct _requested_posts_seq_uniq_ {};
         typedef DDS_DCPSUFLSeq < DDS::ULong, struct _requested_posts_seq_uniq_> _requested_posts_seq;
         typedef DDS_DCPSSequence_var < _requested_posts_seq> _requested_posts_seq_var;
         typedef DDS_DCPSSequence_out < _requested_posts_seq> _requested_posts_seq_out;
         _fulfiller_uuid fulfiller_uuid;
         _requested_posts_seq requested_posts;
   };

   typedef DDS_DCPSStruct_var < NodeRequest> NodeRequest_var;
   typedef DDS_DCPSStruct_out < NodeRequest> NodeRequest_out;

   struct Request
   {
         typedef DDS::Char _uuid_slice;
         typedef DDS::Char _uuid[17];
         typedef _uuid _uuid_out;
         static _uuid_slice * _uuid_alloc ();
         static void _uuid_free (_uuid_slice *);
         static void _uuid_copy (_uuid_slice* to, const _uuid_slice* from);
         static _uuid_slice *_uuid_dup (const _uuid_slice* from);

         struct _uuid_uniq_ {};
         typedef DDS_DCPS_FArray_var< _uuid, _uuid_slice, struct _uuid_uniq_> _uuid_var;
         typedef DDS_DCPS_Array_forany< _uuid, _uuid_slice, struct _uuid_uniq_> _uuid_forany;
         struct _user_requests_seq_uniq_ {};
         typedef DDS_DCPSUVLSeq < NodeRequest, struct _user_requests_seq_uniq_> _user_requests_seq;
         typedef DDS_DCPSSequence_var < _user_requests_seq> _user_requests_seq_var;
         typedef DDS_DCPSSequence_out < _user_requests_seq> _user_requests_seq_out;
         _uuid uuid;
         _user_requests_seq user_requests;
   };

   typedef DDS_DCPSStruct_var < Request> Request_var;
   typedef DDS_DCPSStruct_out < Request> Request_out;

   struct Response
   {
         typedef DDS::Char _uuid_slice;
         typedef DDS::Char _uuid[17];
         typedef _uuid _uuid_out;
         static _uuid_slice * _uuid_alloc ();
         static void _uuid_free (_uuid_slice *);
         static void _uuid_copy (_uuid_slice* to, const _uuid_slice* from);
         static _uuid_slice *_uuid_dup (const _uuid_slice* from);

         struct _uuid_uniq_ {};
         typedef DDS_DCPS_FArray_var< _uuid, _uuid_slice, struct _uuid_uniq_> _uuid_var;
         typedef DDS_DCPS_Array_forany< _uuid, _uuid_slice, struct _uuid_uniq_> _uuid_forany;
         _uuid uuid;
         DDS::ULong post_id;
         DDS::String_mgr post_body;
         DDS::Long dateOfCreation;
   };

   typedef DDS_DCPSStruct_var < Response> Response_var;
   typedef DDS_DCPSStruct_out < Response> Response_out;
}
template <>
TSN::UserInformation::_uuid_slice* DDS_DCPS_ArrayHelper < TSN::UserInformation::_uuid, TSN::UserInformation::_uuid_slice, TSN::UserInformation::_uuid_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < TSN::UserInformation::_uuid, TSN::UserInformation::_uuid_slice, TSN::UserInformation::_uuid_uniq_>::copy (TSN::UserInformation::_uuid_slice *to, const TSN::UserInformation::_uuid_slice* from);
template <>
void DDS_DCPS_ArrayHelper < TSN::UserInformation::_uuid, TSN::UserInformation::_uuid_slice, TSN::UserInformation::_uuid_uniq_>::free (TSN::UserInformation::_uuid_slice *ptr);
template <>
TSN::NodeRequest::_fulfiller_uuid_slice* DDS_DCPS_ArrayHelper < TSN::NodeRequest::_fulfiller_uuid, TSN::NodeRequest::_fulfiller_uuid_slice, TSN::NodeRequest::_fulfiller_uuid_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < TSN::NodeRequest::_fulfiller_uuid, TSN::NodeRequest::_fulfiller_uuid_slice, TSN::NodeRequest::_fulfiller_uuid_uniq_>::copy (TSN::NodeRequest::_fulfiller_uuid_slice *to, const TSN::NodeRequest::_fulfiller_uuid_slice* from);
template <>
void DDS_DCPS_ArrayHelper < TSN::NodeRequest::_fulfiller_uuid, TSN::NodeRequest::_fulfiller_uuid_slice, TSN::NodeRequest::_fulfiller_uuid_uniq_>::free (TSN::NodeRequest::_fulfiller_uuid_slice *ptr);
template <>
TSN::Request::_uuid_slice* DDS_DCPS_ArrayHelper < TSN::Request::_uuid, TSN::Request::_uuid_slice, TSN::Request::_uuid_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < TSN::Request::_uuid, TSN::Request::_uuid_slice, TSN::Request::_uuid_uniq_>::copy (TSN::Request::_uuid_slice *to, const TSN::Request::_uuid_slice* from);
template <>
void DDS_DCPS_ArrayHelper < TSN::Request::_uuid, TSN::Request::_uuid_slice, TSN::Request::_uuid_uniq_>::free (TSN::Request::_uuid_slice *ptr);
template <>
TSN::Response::_uuid_slice* DDS_DCPS_ArrayHelper < TSN::Response::_uuid, TSN::Response::_uuid_slice, TSN::Response::_uuid_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < TSN::Response::_uuid, TSN::Response::_uuid_slice, TSN::Response::_uuid_uniq_>::copy (TSN::Response::_uuid_slice *to, const TSN::Response::_uuid_slice* from);
template <>
void DDS_DCPS_ArrayHelper < TSN::Response::_uuid, TSN::Response::_uuid_slice, TSN::Response::_uuid_uniq_>::free (TSN::Response::_uuid_slice *ptr);




#endif 
