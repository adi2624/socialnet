//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: HelloWorldDataDcps.cpp
//  Source: HelloWorldDataDcps.idl
//  Generated: Fri Sep 14 16:37:02 2018
//  OpenSplice V6.4.140320OSS
//  
//******************************************************************

#include "HelloWorldDataDcps.h"

#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUVLSeq < TSN::Response, struct ResponseSeq_uniq_>;
#endif
#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUVLSeq < TSN::Request, struct RequestSeq_uniq_>;
#endif
#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUVLSeq < TSN::UserInformation, struct UserInformationSeq_uniq_>;
#endif

const char * TSN::UserInformationTypeSupportInterface::_local_id = "IDL:TSN/UserInformationTypeSupportInterface:1.0";

TSN::UserInformationTypeSupportInterface_ptr TSN::UserInformationTypeSupportInterface::_duplicate (TSN::UserInformationTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean TSN::UserInformationTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, TSN::UserInformationTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

TSN::UserInformationTypeSupportInterface_ptr TSN::UserInformationTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   TSN::UserInformationTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (TSN::UserInformationTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < TSN::UserInformationTypeSupportInterface_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

TSN::UserInformationTypeSupportInterface_ptr TSN::UserInformationTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   TSN::UserInformationTypeSupportInterface_ptr result;
   result = dynamic_cast < TSN::UserInformationTypeSupportInterface_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * TSN::UserInformationDataWriter::_local_id = "IDL:TSN/UserInformationDataWriter:1.0";

TSN::UserInformationDataWriter_ptr TSN::UserInformationDataWriter::_duplicate (TSN::UserInformationDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean TSN::UserInformationDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, TSN::UserInformationDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

TSN::UserInformationDataWriter_ptr TSN::UserInformationDataWriter::_narrow (DDS::Object_ptr p)
{
   TSN::UserInformationDataWriter_ptr result = NULL;
   if (p && p->_is_a (TSN::UserInformationDataWriter::_local_id))
   {
      result = dynamic_cast < TSN::UserInformationDataWriter_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

TSN::UserInformationDataWriter_ptr TSN::UserInformationDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   TSN::UserInformationDataWriter_ptr result;
   result = dynamic_cast < TSN::UserInformationDataWriter_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * TSN::UserInformationDataReader::_local_id = "IDL:TSN/UserInformationDataReader:1.0";

TSN::UserInformationDataReader_ptr TSN::UserInformationDataReader::_duplicate (TSN::UserInformationDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean TSN::UserInformationDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, TSN::UserInformationDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

TSN::UserInformationDataReader_ptr TSN::UserInformationDataReader::_narrow (DDS::Object_ptr p)
{
   TSN::UserInformationDataReader_ptr result = NULL;
   if (p && p->_is_a (TSN::UserInformationDataReader::_local_id))
   {
      result = dynamic_cast < TSN::UserInformationDataReader_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

TSN::UserInformationDataReader_ptr TSN::UserInformationDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   TSN::UserInformationDataReader_ptr result;
   result = dynamic_cast < TSN::UserInformationDataReader_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * TSN::UserInformationDataReaderView::_local_id = "IDL:TSN/UserInformationDataReaderView:1.0";

TSN::UserInformationDataReaderView_ptr TSN::UserInformationDataReaderView::_duplicate (TSN::UserInformationDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean TSN::UserInformationDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, TSN::UserInformationDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

TSN::UserInformationDataReaderView_ptr TSN::UserInformationDataReaderView::_narrow (DDS::Object_ptr p)
{
   TSN::UserInformationDataReaderView_ptr result = NULL;
   if (p && p->_is_a (TSN::UserInformationDataReaderView::_local_id))
   {
      result = dynamic_cast < TSN::UserInformationDataReaderView_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

TSN::UserInformationDataReaderView_ptr TSN::UserInformationDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   TSN::UserInformationDataReaderView_ptr result;
   result = dynamic_cast < TSN::UserInformationDataReaderView_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * TSN::RequestTypeSupportInterface::_local_id = "IDL:TSN/RequestTypeSupportInterface:1.0";

TSN::RequestTypeSupportInterface_ptr TSN::RequestTypeSupportInterface::_duplicate (TSN::RequestTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean TSN::RequestTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, TSN::RequestTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

TSN::RequestTypeSupportInterface_ptr TSN::RequestTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   TSN::RequestTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (TSN::RequestTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < TSN::RequestTypeSupportInterface_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

TSN::RequestTypeSupportInterface_ptr TSN::RequestTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   TSN::RequestTypeSupportInterface_ptr result;
   result = dynamic_cast < TSN::RequestTypeSupportInterface_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * TSN::RequestDataWriter::_local_id = "IDL:TSN/RequestDataWriter:1.0";

TSN::RequestDataWriter_ptr TSN::RequestDataWriter::_duplicate (TSN::RequestDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean TSN::RequestDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, TSN::RequestDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

TSN::RequestDataWriter_ptr TSN::RequestDataWriter::_narrow (DDS::Object_ptr p)
{
   TSN::RequestDataWriter_ptr result = NULL;
   if (p && p->_is_a (TSN::RequestDataWriter::_local_id))
   {
      result = dynamic_cast < TSN::RequestDataWriter_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

TSN::RequestDataWriter_ptr TSN::RequestDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   TSN::RequestDataWriter_ptr result;
   result = dynamic_cast < TSN::RequestDataWriter_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * TSN::RequestDataReader::_local_id = "IDL:TSN/RequestDataReader:1.0";

TSN::RequestDataReader_ptr TSN::RequestDataReader::_duplicate (TSN::RequestDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean TSN::RequestDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, TSN::RequestDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

TSN::RequestDataReader_ptr TSN::RequestDataReader::_narrow (DDS::Object_ptr p)
{
   TSN::RequestDataReader_ptr result = NULL;
   if (p && p->_is_a (TSN::RequestDataReader::_local_id))
   {
      result = dynamic_cast < TSN::RequestDataReader_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

TSN::RequestDataReader_ptr TSN::RequestDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   TSN::RequestDataReader_ptr result;
   result = dynamic_cast < TSN::RequestDataReader_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * TSN::RequestDataReaderView::_local_id = "IDL:TSN/RequestDataReaderView:1.0";

TSN::RequestDataReaderView_ptr TSN::RequestDataReaderView::_duplicate (TSN::RequestDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean TSN::RequestDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, TSN::RequestDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

TSN::RequestDataReaderView_ptr TSN::RequestDataReaderView::_narrow (DDS::Object_ptr p)
{
   TSN::RequestDataReaderView_ptr result = NULL;
   if (p && p->_is_a (TSN::RequestDataReaderView::_local_id))
   {
      result = dynamic_cast < TSN::RequestDataReaderView_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

TSN::RequestDataReaderView_ptr TSN::RequestDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   TSN::RequestDataReaderView_ptr result;
   result = dynamic_cast < TSN::RequestDataReaderView_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * TSN::ResponseTypeSupportInterface::_local_id = "IDL:TSN/ResponseTypeSupportInterface:1.0";

TSN::ResponseTypeSupportInterface_ptr TSN::ResponseTypeSupportInterface::_duplicate (TSN::ResponseTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean TSN::ResponseTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, TSN::ResponseTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

TSN::ResponseTypeSupportInterface_ptr TSN::ResponseTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   TSN::ResponseTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (TSN::ResponseTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < TSN::ResponseTypeSupportInterface_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

TSN::ResponseTypeSupportInterface_ptr TSN::ResponseTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   TSN::ResponseTypeSupportInterface_ptr result;
   result = dynamic_cast < TSN::ResponseTypeSupportInterface_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * TSN::ResponseDataWriter::_local_id = "IDL:TSN/ResponseDataWriter:1.0";

TSN::ResponseDataWriter_ptr TSN::ResponseDataWriter::_duplicate (TSN::ResponseDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean TSN::ResponseDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, TSN::ResponseDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

TSN::ResponseDataWriter_ptr TSN::ResponseDataWriter::_narrow (DDS::Object_ptr p)
{
   TSN::ResponseDataWriter_ptr result = NULL;
   if (p && p->_is_a (TSN::ResponseDataWriter::_local_id))
   {
      result = dynamic_cast < TSN::ResponseDataWriter_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

TSN::ResponseDataWriter_ptr TSN::ResponseDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   TSN::ResponseDataWriter_ptr result;
   result = dynamic_cast < TSN::ResponseDataWriter_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * TSN::ResponseDataReader::_local_id = "IDL:TSN/ResponseDataReader:1.0";

TSN::ResponseDataReader_ptr TSN::ResponseDataReader::_duplicate (TSN::ResponseDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean TSN::ResponseDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, TSN::ResponseDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

TSN::ResponseDataReader_ptr TSN::ResponseDataReader::_narrow (DDS::Object_ptr p)
{
   TSN::ResponseDataReader_ptr result = NULL;
   if (p && p->_is_a (TSN::ResponseDataReader::_local_id))
   {
      result = dynamic_cast < TSN::ResponseDataReader_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

TSN::ResponseDataReader_ptr TSN::ResponseDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   TSN::ResponseDataReader_ptr result;
   result = dynamic_cast < TSN::ResponseDataReader_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * TSN::ResponseDataReaderView::_local_id = "IDL:TSN/ResponseDataReaderView:1.0";

TSN::ResponseDataReaderView_ptr TSN::ResponseDataReaderView::_duplicate (TSN::ResponseDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean TSN::ResponseDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, TSN::ResponseDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

TSN::ResponseDataReaderView_ptr TSN::ResponseDataReaderView::_narrow (DDS::Object_ptr p)
{
   TSN::ResponseDataReaderView_ptr result = NULL;
   if (p && p->_is_a (TSN::ResponseDataReaderView::_local_id))
   {
      result = dynamic_cast < TSN::ResponseDataReaderView_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

TSN::ResponseDataReaderView_ptr TSN::ResponseDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   TSN::ResponseDataReaderView_ptr result;
   result = dynamic_cast < TSN::ResponseDataReaderView_ptr> (p);
   if (result) result->m_count++;
   return result;
}



